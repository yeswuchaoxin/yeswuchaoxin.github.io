{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[{"title":"文章分类","date":"2020-11-01T16:00:00.000Z","updated":"2021-05-03T15:39:28.404Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":"","author":"79bk.cn"},{"title":"个人简介","date":"2020-11-02T16:00:00.000Z","updated":"2021-05-03T15:38:04.382Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"","author":"79bk.cn"},{"title":"友情链接","date":"2020-09-18T16:00:00.000Z","updated":"2021-05-03T15:38:52.713Z","comments":true,"path":"links/index.html","permalink":"http://example.com/links/index.html","excerpt":"","text":"","author":"79bk.cn"},{"title":"tags","date":"2020-09-19T08:19:22.000Z","updated":"2021-05-03T15:37:22.961Z","comments":true,"path":"tag/index.html","permalink":"http://example.com/tag/index.html","excerpt":"","text":"","author":"79bk.cn"}],"posts":[{"title":"javaee考试","slug":"javaee考试","date":"2021-05-03T08:33:37.000Z","updated":"2021-05-03T11:13:59.436Z","comments":true,"path":"2021/05/03/javaee考试/","link":"","permalink":"http://example.com/2021/05/03/javaee%E8%80%83%E8%AF%95/","excerpt":"","text":"第一章,概念为主soa是一种抽象的软件架构，web服务是一种具体的技术，我们可以使用web服务实现soa 1，SOA（架构）有几类实体entity。1，2，3提供方，消费方，注册方--提供方是干嘛的，消费方是干嘛的，注册方是干嘛的。提供方，向消费方提供服务。消费方访问提供方发布的网页，注册方可以在因特网上发布和定位服务--SOA的特性（feature），理解为主，可发性？，动态绑定的时候，到底是什么含义，SOA的特性：1可发现和动态绑定，2支持互操作，3松散耦合 4位置透明--SOA绑定：可以分为动态绑定和静态绑定。在动态绑定中，服务请求者通过服务注册中心查找服务描述，并动态地与服务交互；在静态绑定中，服务请求者已经与服务提供者达成默契，通过本地文件或其他方式直接与服务进行绑定。2，web服务和SOA架构的关系---soa是一种抽象的软件架构，web服务是一种具体的技术，我们可以使用web服务实现soa(很重要，一定会考到)--web服务的特性，优点，理解为主特点：支持数据交换，支持文档交换，支持同步和异步的客户端优点：节约成本，提高代码的重用，支持应用程序和数据集成，通用性。3，java平台里面web开发相关的api，我给你一个api，要知道在web开发中起到什么作用，比如第六单元的JASP这个api,是用来处理xml数据的。或者反过来，我想开发REST风格的web，使用哪一种api，JAX-RS这个，4，两种类型的web服务，哪两种类型，1-5单元，都在讲这两种web服务。两种web服务的特点是什么，区别是什么。--使用的协议标准是不一样的，--第一种XML的web服务，协议标准使用的WSDL，SOAP，UDDI。以服务为中心的。--REST风格，协议标准使用的是HTTP，MIME。资源为中心的。 第二章2，3单元涉及基于xml的web服务，--1，WSDL文档，作用是描述基于xml的web服务，不要求会写WSDL文档，能看懂这个文档，知道在描述什么样的web服务，到底有几个服务端点，服务是由服务端点组成的。每个服务端点定义几个服务操作，根据交互的消息序列看，书上给出了四种交互模式，你能不能分辨出是哪一种交互模式， one-way,单程,只有一个&lt;input&gt;请求request，request-response,请求-响应一个input（请求）+output，solicit-response,征求-响应,output（请求）+input，notification,通知,只有output返回 1.2，每个完整的WSDL应该由两部分组成，抽象和具体定义，抽象定义要定义哪些内容，具体定义要定义哪些内容。抽象模型：包含&lt;type&gt;&lt;message&gt;元素，提供关于web服务支持的操作，没有提供通信协议和位置信息的描述。具体模型：包含&lt;binding&gt;&lt;service&gt;元素，提供通信协议和位置信息的描述。 3,SOAP是通信协议，提供方，消费方，用的都是soa协议，双方交互的是消息，消息的基本结构，hanle,body，基本结构， 第三章介绍了JAX-WS接口 关系到你能不能看懂程序代码，基于xml的web服务的基本流程，把第一个activity实验做完就掌握到位了。怎么去访问web服务不做要求，只要求开发web服务。 第四章概念，资源，URI，设计原则 1，Rest风格架构到底使用了哪些规范，XML,URI,MIME这些规范，这些规范起到什么作用，2，Rest风格的资源的概念，怎么标识资源（用URI），每个资源都有唯一的标识，组件不做要求，3，设计原则，怎么使用http的方法，目录结构，URI的,资源的目录结构，还有数据交互格式怎么去设计，设计原则尽量理解。 第五章JAX-RS API做完Activity 第六章xml的处理规范，JAXP,JAXB,SAAJ，JAXP,JAXB：处理xm数据格式的。JAXP三种解析器，哪些是只读的，哪些是读写解析器。知道什么事JAXB就可以了。--JAXP--JAXB是将XML-&gt;对象树SAAJ:处理SOAP消息附件的， 第七章Metro,stack，那个栈，那张图看看就可以了。 第八章 设计模式部署模式，当我们提到哪种模式，知道解决的是什么问题，比如性能问题，还是安全问题，兼容问题。","categories":[],"tags":[]},{"title":"2019届个人java秋招总结","slug":"2019届个人java秋招总结","date":"2021-05-02T11:21:28.000Z","updated":"2021-05-02T11:21:50.618Z","comments":true,"path":"2021/05/02/2019届个人java秋招总结/","link":"","permalink":"http://example.com/2021/05/02/2019%E5%B1%8A%E4%B8%AA%E4%BA%BAjava%E7%A7%8B%E6%8B%9B%E6%80%BB%E7%BB%93/","excerpt":"","text":"本文由 简悦 SimpRead 转码， 原文地址 www.jianshu.com 这篇文章应该很早就写了，由于各种各样的事拖到现在，终于抽空写了。分享给大家，互勉。 个人在一所非 985，非 211 学校里就读软件工程专业，菜鸟一个。以下是个人的秋招经历，分享给各位热爱 IT 行业的小伙伴。 我从投简历，到笔试，再到面试，最后 offer 的方方面面都说一下。 投简历：这个在 8 月份的时候，就海投各大互联网公司。直接上图 WechatIMG5.png 上图只是部分的公司，后来又投了很多公司，我就懒得更新了。。。 第一部分：投简历这个，我就说说可以在哪些渠道可以获得这些招聘信息吧，我主要从内推军，学校群，各大公司官网和牛客网等获取的。 投简历前，写简历，怎么写，这个我就说说自己的吧，仅代表个人，仅供参考，大佬勿喷。 我是学 java 的，所以简历的内容一般分： 个人的基本信息 个人实习经历（指 IT 实习经历，别写与该岗位无关的实习经历，浪费空间） 个人的掌握的技术（比如你学过的框架，懂的语言 java,php 等，这是核心，对于校招来说，企业很看重基础；社招的话，看重经验） 做过的项目 自我评价 第二部分：笔试来到笔试阶段，个人有点后悔了，实在太多笔试了，从 9 月份开始考，一直考一直考，考得我都快疯了。而且，还有很多笔试时间是冲突的，最惨的不是这个，最惨的是不会做编程题。（这个时候，建议你去赶紧刷了牛客网的剑指 Offer, 最好结合一下左神的视频来学习，亲测非常有用） 第三部分：面试（最重要的一个环节）我接到的面试通知：百度，老虎证券（已拿 offer），菜鸟联盟，三七互娱 (已拿 offer)，小米（已拿 offer），迅雷，n 多个不知名小公司（一会儿我吐槽一下）我先上面经：百度一面（9 月 18 日，19：00） 1，自我介绍4，聊项目，不断问技术5，二叉树有哪些，分别有什么特点第一：满二叉树第二：完全二叉树第三：搜索二叉树（左边小，右边大）第四：哈夫曼树（带权路径最小的二叉树）第五：平衡二叉树（空树或左子树和右子树的高度差不超过1）第六：红黑树（1.根节点必须是黑；2.每条路径所包含的黑节点数目必须一样；3.每个叶子节点的空节点都是黑；4。节点要么是红，幺妹是黑；没第三种颜色；5.父节点是红，两个子节点必须是黑）6.数据库连接池是为了解决什么问题7.mysql数据库的索引有哪些？我说有聚集索引和非聚集索引，组合索引等等巴拉巴拉8.聚集索引和非聚集索引分别是怎么实现的？9.多线程这一块，你了解过JUC没，你讲讲你认识哪些？10，如何保证生产者速度大于消费者速度11,如何产生不同的id，这里不断抠细节12，算法题（从左上角走到右下角，求最短路径。考广度优先遍历）13，算法题（A去，B才去，C去，BD一定去，等等）考“图”11：问面试官问题整个过程持续了80分钟，无非就是看你的简历来问东西，然后来知识点串烧，最后来一下代码实战编程。 老虎证券一面（9 月 18 日 10：30） 1.自我介绍2.concurrentHash了解过吗？看过源码吗？3.jvm，为什么有两个survivor区？说说jvm的内存结构？4，左右子树互换，怎么实现？5，写sql语句，一天内，找出访问量前10的股票的id和name。时间函数:date_sub(now()，interval 1 day)6，一千万数据，找出前50条数据。7，redis的zset怎么实现的？有序的集合，双向链表。8，了解过rpc框架吗？9，volatile了解过吗？10，AQS怎么实现的？11，BlockingQueue怎么实现的？12，synchronized和lock13，innodb和myisam的区别 老虎证券二面（9 月 18 日 11：45） 1.自我介绍2.说说对spring的理解，我就说了IOC和AOP3.那你讲讲IOC是如何实现的？4.多线程了解吗？讲讲ConcurrentHashMap和CountDownLatch的认识5.semaphore和闭锁的区别6.了解过JVM没？讲讲你认识JVM有哪些？7.说说为什么要双亲委派？java中一定要用双亲委派吗？8.了解过JVM调优没？了解过，那你一般怎么判断的和用什么方法调的？9.你现在用的是JDK8吧？是。那了解过JDK9吗？了解过。那说说JDK9和JDK8有哪些不同？默认垃圾收集器改为了G1。说说对G1的了解？巴拉巴拉一堆。面试官面对我的回答似乎有点意外（我知道稳了）10.于是接着问我，对薪资有什么要求？（我就哈哈哈一笑：“哈哈哈能养活我就好”）11.问我有什么问题想问？（我就问：基于我刚才的面试情况，你觉得我还有哪些方面需要改进？以及我进来后，负责什么业务？） 老虎 HR 面（9 月 21 日，电话面） 个人情况 是否单身 对于薪资要求 智力题 问 HR 问题 三七互娱（9 月 18 日 15：00） 一面1.MySQL的存储引擎以及其底层实现答：MySql的存储引擎其实有很多。但官方主要使用的一般有Innodb和MyISAM。这个时候你可以继续向说着二者的区别，比如：一，是否支持事务（这里可以延展到Spring的事务管理）；二，行锁和表锁，InnoDB默认的是行锁，但也可以切换为表锁。MyISAM只有表锁。（在这里，可能会成为面试官问你的下一个问题：Synchronized和Lock）三、全文索引。在mysql5.6版本之前，只有MyISAM支持全文索引。5.6之后，InnoDB和MYISAM都支持。（在这里，可能会成为面试官问你的下一个问题，可能会问你：什么是索引？索引种类？怎么建索引？索引的底层实现？索引失效问题以及如何处理失效问题？）四、性能讨论，这个话题，深入研究过，就大概能说个一二，没研究过，也没事。我刚刚就一个问题进行了讨论，其实下面的问题也差不错一样答法。发散你的思维，把有关系的知识点，都能说说。2.innodb和myisam的区别3.多线程的锁（你可以答锁的粒度，锁的分类，锁的底层实现）4.线程threadpoolexecutor的参数（看一下JDK源码就知道是哪几个了，不慌）5.Linux命令（除了常规的命令，最好还要掌握一些有关内存，cpu等高级命令，比如top这些，最好能实战运用过）6.CAS7.多线程的api（这个得看你掌握哪些，信手拈来的可以有）8.jmm9，项目介绍和解惑二面1.Integer和int区别2.arraylist的初始容量和api3.项目介绍4.socket编程5.聊骚三面1.自我介绍2.为什么做游戏行业3.抗压能力如何(就是能不能加班的意思)三七互娱的java岗技术栈（或者说面试考哪些吧：只面向校招）1、java基础：比如集合和多线程是最爱问的，因为我们公司做游戏的，多线程经常用2、常用组件：spring\\hibernate\\mybatis\\redis等这些3、设计模式4、算法：一、快排；二给你一道算法题做做5、计算机网络：就是TCP/UDP6、MYSQL:这个也是重点，好好复习。7、JVM：内存结构、垃圾回收等 小米三面 1.自我介绍2.首先说Object的所有方法，然后问每一个方法的实现机制3.刚才你说到equals（）方法，那你讲讲String的equals()的具体实现4.String的equals(）中是怎么判断类型是否一致的5.问我Spring用过没？6.问我IOC的实现机制？用到哪些设计模式？7.你用过动态代理没？用过，那你知道AOP里面的动态代理几种实现方式？分别是什么？JDK、CGLIB8.你讲讲CGLIB9.了解过Spring的事务吗？10.从事务这里过渡到SQL中的事务，问我事务的隔离级别？分别说出每个隔离级别的解决的问题？11.问我怎么优化SQL？我这里提了一下索引和其他12.问我索引的底层结构？然后我就说B+树，然后给面试官分析了B树和B+树的区别，以及解析为什么SQL用B+树，而MongoDB用B树13.问我了解hash索引吗？我说了解，然后就不问我了14.问我知道聚集索引和非聚集索引吗？说说二者区别，这里我又提到了Innodb和myisam15.问我innodb和myisam的区别16.除了动态代理，还了解过其他设计模式吗？我就说了自己比较熟悉的单例、工厂、适配器、装饰17.问我工厂方法和抽象工厂的区别18.TCP的三次握手？我就巴拉巴拉将，我问面试官，要不要解释为什么两次握手不行，巴拉巴拉一堆。说完又问面试官，要不要讲四次挥手，他说不用了。总的来说，2-4就是考察java基础5-9就是考察框架10-15问数据库16-17就问设计模式18：计算机网络然后顺便提一下一面和二面吧！！！一面就是简单粗暴：三道算法题二面就是问你项目，死扣项目的细节，面试官问我是怎么考虑的？ 以上是个人的 java 面经，总结上述的面试经历。面试官问的问题，一般就是从简单，到困难。基本要求：基础知识扎实（全面）加分要求：对基础知识理解深刻（深度）更厉害的，就是要求你看过源码，理解源码。 通常面试官问的问题，都是 “知识串烧”。举个例子：面试官：了解过 HashMap 吗？hashmap 和 LinkHashMap 的区别？你：HashMap 是无序的，LinkHashMap 是有序的。面试官：那你说说 LinkHashMap 和 TreeMap 的区别？你：TreeMap 和 LinkHashMap 的 key 都是 有序的，TreeMap 的内部结构是红黑树，LinkHashMap 的内部结构是链表。 所以自己看面经的时候，也可以往知识串烧这方面多想想，无论是对知识的掌握还是对面试，都很有帮助的。 总结：其实总的来说，现在回头一看，想拿 offer，就是：让面试官喜欢你。喜欢你的原因可能有： 1、面试官因为你思考问题的方式而喜欢你； 2、面试官在你身上看到了他当年的模样； 3、当然，面试官也不是傻的，你的技术能力肯定也会考虑的。 让面试官喜欢你这句话的意思：在很多人的专业能力都差不多的时候，为什么面试官选择你，而不选择其他人，因为面试官可能就是你以后的老大，你以后的老大要和你相处，肯定挑一个自己喜欢的相处呀。 深呼吸，不慌，祝你们秋招面试顺利。加油","categories":[],"tags":[]},{"title":"一个学长的java秋招感想","slug":"一个学长的java秋招感想","date":"2021-05-02T11:14:11.000Z","updated":"2021-05-02T11:15:05.760Z","comments":true,"path":"2021/05/02/一个学长的java秋招感想/","link":"","permalink":"http://example.com/2021/05/02/%E4%B8%80%E4%B8%AA%E5%AD%A6%E9%95%BF%E7%9A%84java%E7%A7%8B%E6%8B%9B%E6%84%9F%E6%83%B3/","excerpt":"","text":"本文由 简悦 SimpRead 转码， 原文地址 www.jianshu.com 序言我的秋招起于 7 月初，终于 9 月中旬，拿到的 offer 如下：vipkid 提前批测试开发（感谢第一个给我发 offer 的公司），海康威视 java 研发，oppo colorOs，华为优招安卓研发，百度测试开发，瓜子二手车 java 研发。 这一路有过心酸，有过自我怀疑，有过焦虑，感觉每个找工作的人都会有这么一个心理过程，大概是一开始的初生牛犊不怕虎，连连受挫的怀疑人生，再到 offer 选择的纠结。 比起我的同学我还是太渣了，大神们在提前批收割 offer 的时候，我还是一个连 hashmap 的底层都说不利索的人，身边的朋友接连面试的时候，我连笔试都做不好，9 月份秋招战役打响之后，连面试都寥寥无几，Spring 只能说出 AOP 和 IOC。 到现在都记得贝壳一面挂的那个星期天，我一个人在博物馆迷茫的四处走，想哭都哭不出来的委屈，跟二姐发微信的时候手都是颤抖的，我记得那天的阳光很大，但是我的手和心都是冷的，那一刻的我不知道我会不会没有工作了，那个星期真的是我最凄惨的一个星期，面啥挂啥，还都是一面挂，远景，去哪，途牛，用友，大疆终面，贝壳的六连挂真的把我打击到怀疑人生。贝壳面试官问我要不要转产品的时候我真的都有点崩溃了，当时想我可能技术真的很差劲吧。 感谢那段时间一直陪着我的二姐，这是一个很毒舌的女人，她说话总是一阵见血，那天的我，决定咬牙放弃一周的笔面试，沉下心去学习，我告诉自己，这个年纪一定要有壮士断腕的勇气。 那一个星期大概是我秋招的转折点，在这周之后面试就顺利了很多。拿到的 offer 除了 vipkid 和华为都是这周之后拿到的（也没几个。。。2333333）。 找工作其实真的心态很重要，相信自己，坚持努力，天道酬勤。 准备工作我找工作的时候一开始有点杂，大概是什么都想做的那种，觉得测开可以培养一个人的全面思考的思维，java 又是本身学过的东西，还想做 android 觉得很酷，然后就三个都投，一开始还投了一家大数据，感谢他把我简历刷了，不然我真的不知道面试怎么尬聊。 测开测开我就推荐一本书《软件测试的艺术》 因为只看过这本，233333。 java 研发首先呢，是一定要有项目经验的，我就是吃亏在没有项目经验上了，所以一开始面试的时候呢，就一直是处于 “背书” 的状态，其实如果书背的好的话，也是可以的，毕竟校招，面试官对动手能力的要求也不是很高，基础好的话好培养么。 项目经验的话我是这样的，看慕课网，这个真的是一个超级赞的网站，基础和项目都有，可以跟着敲一下代码，然后呢，我就是读源码（这个吧，正好当时要做实验，我就每天读实验框架的源代码）。 其实比较推荐读 github 上 star 数多的项目源码，然后自己给自己划定一个需求自己实现。（这些我都没做到，我觉得能做到的应该是大佬 sp 级别的了） 基础的话比较推荐下面的书目。 《java 编程思想》《java 核心技术》（这俩看一本就行） 《深入理解 java 虚拟机》（重点是 GC，内存模型，双亲委派机制） 《java 程序员面试宝典》（这本很重要，最好能背下来，就是看着目录就能说出内容的那种熟练度） 《剑指 offer》（面试的手撕代码半数以上都缘于这本书啊） 数据库和高并发是属于扩展加分项。SQL 一定要熟练。（但是下面这两本书我都没有怎么看，只是推荐了经典书目） 《高性能 MySQL》《SQL 技术内幕》《redis 设计与实现》 《java 并发实战》 框架的话我觉得把《Spring 源码解读》读完就好了，重点理解 AOP 和 IOC 就好了，spring 这个框架其实大概算是 java 项目的典范了。 网络方面的话，我是看天勤的考研书，我真的觉得那本书讲的挺好的，当然，也有人推荐图解系列（日本）这就见仁见智了，内容都差不多。 设计模式的话，重点是单例模式，用在哪里，三种线程安全的写法。其他模式了解定义和如何使用就好了。 如果了解微服务器，MQ，Dubbo，区块链的话更好了，加分项。 安卓安卓大概就是在 java 研发的基础上加两本书 《第一行代码》《android 权威指南》 面经其实很佩服那些能把面经写出来的人，我一开始还会记自己面试都问到了什么，后来面的太多，要提升的东西太多了，都没有时间记下来，就把常问的和印象深刻的写下来吧给大家做参考。 测开 为什么选择做测试开发？ 测试各种东西（水，电梯，冰箱，程序 balabala） 在项目中都进行了什么测试？ 测试方法的分类 情商类：出现 bug 如何与程序员沟通之类 java 研发 基础类。《java 程序员面试宝典》上的问题，就不赘述了 各种集合类。hashmap 源码（问的最多） 和 hashtable 的区别 arraylist 和 linkedlist 的区别 还有各种线程安全比较和扩容机制的对比 如何使用框架（ssh，spring，mybatis，springmvc）？ 4.spring 的 AOP 和 IOC 如何实现？ 如何实现并发？线程的实现方式？并发解决的问题？各种锁的问题 数据库：SQL 语句，索引，引擎，并发级别和可能出现的问题 7.jvm：GC，内存模型，内存分配机制 网络：tcp 三次握手四次挥手，和 udp 的区别，http 的头部（get 和 post 的区别），输入 url 之后会出现的过程，和 https 的区别，cookie 和 session 安卓 四大组件（生命周期） 安卓虚拟机 3.linux 相关知识 矢量图和位图以及各种单位 5.view 的绘制相关问题 显式和隐式 intent 7.handler 机制 网络 / 数据以及开源框架 动画相关 所有以上，都会手撕代码。 emmm，面大疆终面的时候，终面面试官问我，怎么编写程序节能（不是时间复杂度也不是空间复杂度，节约电能，emmmm），问的我一脸懵逼，大疆其实挂我挂的我挺忧伤的，就是感觉我俩鸡同鸭讲，最想去的公司把我挂了，而且是我认识的终面全过了的情况下，心塞啊。 offer 抉择这个 offer 抉择我自己是考虑清楚的，但是我决定之后，很多人都说我选择错了，还有人直接说我冲动愚蠢，这个吧，还是要综合自己的内心，自己下决定，别人说啥都白搭。 我个人认为，钱真的不是最重要的，虽然我们总说面向工资编程，但钱真的不能作为第一决定因素。因为拿多少钱干多少活，尤其是互联网，根本不存在高薪还轻松的工作。 所有的决定都要自己下，听从你的内心，无论别人怎么说，坚定你自己的内心，其实我也动摇过，在各种被 diss 的时候也想过自己是不是做了错误的决定，但是落子无悔，不管作什么决定，努力就好了，时间会告诉你答案。 尾声秋招就算结束了，给自己一个总结，然后彻底翻篇。 上面写的如果想起来之后会回来补充的，祝所有看到这篇文章的人都能找到心仪的工作，前程似锦~！","categories":[],"tags":[]},{"title":"怎么找暑假实习","slug":"怎么找暑假实习","date":"2021-05-02T08:28:37.000Z","updated":"2021-05-02T08:31:21.049Z","comments":true,"path":"2021/05/02/怎么找暑假实习/","link":"","permalink":"http://example.com/2021/05/02/%E6%80%8E%E4%B9%88%E6%89%BE%E6%9A%91%E5%81%87%E5%AE%9E%E4%B9%A0/","excerpt":"","text":"本文由 简悦 SimpRead 转码， 原文地址 www.zhihu.com 风口浪尖上的猪​ 字节的老学长来直接给你关键性的建议吧， 接下里的几个月可以说将会是你人生中最重要的阶段。 把这回答下面的内容看完，真的有可能会改变你的命运。 一、沉住气，不要慌看了你的问题描述，大概能猜出来你应该是一直没有准确的掌握互联网校招相关的信息，等到现在已经大三下学期开学了，3 月份各大厂暑期实习都开始招聘了，你身边很多厉害的同学有的都已经拿到 offer 了，你才发现自己还没有准备好。 不过没关系，现在还好是 3 月份，还好你在知乎提问，看到了我的回答。 老学长跟你吃一个定心丸，每年在现在暑期实习照片刚刚开始的时候， 没有准备好的同学有很多很多，但是最后在秋招，秋招补录， 甚至大四的时候找到机会成功冲进大厂的同学都有很多很多。 你现在首先最关键的是要: 制定好计划，调整好心态。 眼前没竞赛项目经历都没什么关系的，校招基础最重要！ 二、现在要立刻确定好求职的具体技术岗位鉴于你现在的情况，虽然是 985 本科，但是几乎没什么某种具体技术方向上的积累。 关于岗位老学长直接给出你最干货的建议: 1、果断放弃任何 AI 方向，算法相关岗，不用去做炮灰了。直接就考虑开发岗位吧。 2、根据我个人对大厂校园招聘掌握的信息来看，开发岗位的比较好拿到 offer 的岗位是: web 前端工程师 Android 客户端工程师 java 后端开发工程师 3、个人不太建议你在现在这个阶段再学习冲击 c++ 等相关岗位了，老学长 java，go，c++，py 等技术方向均做过。c++ 后端方向更多偏向技术底层技术组件研发，基础架构等相关，往往对候选者要求比较高。同时 c++ 技术栈相对于 java 技术栈入门难度要高很多很多。 二、现在要立刻以 8 月份的秋季招聘为目标学习冲刺1、算法题目 LeetCode 现在必须刷起来无论互联网秋招还是秋招，编程功底不行神仙都救不了你。如果你算法与数据结构功底还比较扎实: 二话不说就直接上 LeetCode，先从 top 热门题目开始做，这里分享一个刷题手册。 https://zhuanlan.zhihu.com/p/353670540​zhuanlan.zhihu.com 如果你编程功底不行，可以参考我之前的回答: 我现在是计算机大一学生，怎样掌握更强的编程能力、算法等，脱颖而出？​www.zhihu.com 2、针对具体岗位赶紧制定学习路线我之前采访了我们部门一个双非的本科生去年夏天校招拿到后端岗位的， 关于全部的学习路线，书籍，尤其是项目该如何准备，在这个回答里我都详细的写过了: 字节跳动面试难吗，应该如何应对？​www.zhihu.com 其他岗位的干货学习路线我已经在拖同事帮忙分享了，很快几天之内就会更新。 3、大量看大厂优质校招面经可以自己去牛客网上搜: 牛客网 - 找工作神器 | 笔试题库 | 面试经验 | 实习招聘内推，求职就业一站解决_牛客网​www.nowcoder.com 也可以看我之前整理好的: 互联网校招面经精心整理优质面经合集​mp.weixin.qq.com 4、上面这部分内容你最慢最慢也要在 7 月之前都要搞定搞不定你就挤时间！！！挤不出来时间你就少睡觉！！！时间还不够你就拼命！！！ 三、关于岗位投递最靠谱的建议a、实习准备部分1、不要等自己觉得全部都准备好了再出来面试，放心你是永远准备不好的。 2、在你复习的过程中，当你觉得自己复习的进度达到 60% 了，就要在网上开始投递简历，准备面试。 3、要从中小型互联网公司开始面试，一是积累面试经验，二是可以为复习查缺补漏，三是小公司如果面试通过了可以很大的鼓舞自己的信心。 4、最后在开始面试大厂的实习岗位，如果最后没机会上岸大厂，就在秋招之前先去小公司实习。 b、实习岗位投递部分 1、首先不要尽量不要在公司官网投递，防止简历没被看到就直接垃圾箱。要找靠谱的内推人投递。 2、如果觉得自己实力不够，不要投递基础架构，中间件等相关技术部门技术部门往往要求很高。 3、如果觉得自己实力不够，不要投递大厂核心业务，比如核心广告部门，明星产品部门，竞争往往很激烈。 4、要选择比较普通的部门，然后比较通用型的岗位来投递。 四、关于秋招1、秋招一定要参加大厂提前批。 2、秋招一定要尽量早投递，越早机会越大。无数同学都觉得自己准备的不够充分，晚一些投递。 你晚了一个月，几乎 hc 都已经被先面试的同学给抢没了，而且有可能他们实力也不一定有多强。 3、秋招一定要海投，就是海投。 五、如果秋招失败，别放弃，真的有机会1、如果秋招没有机会拿到自己心仪公司的 offer 真的别放弃，后面还有机会。老学长分享两个案例: 我认识的 A 同学特别想去猿辅导，然后秋招的时候没有如愿拿到 offer。秋招之后他并没有放弃，隔了几个月一直在联系猿辅导其他部门的员工是否有 hc，然后最后在第二年的三月份成功通过面试补录进入猿辅导。我认识的 B 同学秋招大厂全挂，但是一直没有放弃。在小公司实习的时候还是在刷题，学习技术知识，同时观察着大厂招聘的动向。在 11 月底秋招结束，腾讯的秋招补录中成功拿到机会进入腾讯。 2、具体原因是因为秋招中，有很多非常优秀的同学在提前批或者秋招正式批次的时候，会拿到非常多的大厂的 offer，但是这些收割机们只能最后去一个公司。所以有很多部门秋招发的 hc 有可能是来的同学不够的，就会出现剩余的情况，这时候只要坚持参加后续的秋招补录或者第二年的春招，都是有机会逆袭的。 六、后记其实人生往往也是这样，错过的时间与机会已经无法追回， 但是只要从现在立刻开始行动，一切都来得及。 这里还有一些校招书单分享给你: 精心整理，计算机书籍推荐​mp.weixin.qq.com 如果感兴趣也可以看一下我其他的一些高赞回答: 我现在是计算机大一学生，怎样掌握更强的编程能力、算法等，脱颖而出？​www.zhihu.com 能给一个计算机本科生的规划提点建议吗？​www.zhihu.com 字节跳动面试难吗，应该如何应对？​www.zhihu.com 本人某 985 计算机专业，感觉学校教的东西很死，很难提高。请问其他 985 计算机类本科生都在自学编程吗？​www.zhihu.com 最后留给你我最喜欢的一句话 ，希望你可以在几个月之后，成功逆袭: 如果对字节跳动感兴趣的话，可以找我内推。在我的知乎主页里有我的联系方式 @风口浪尖上的猪 如觉得这篇回答觉得真的有收获的话，不要只偷偷收藏白嫖猪学长，给猪学长点个赞吧，你们动动手指也能把这个回答顶起来，让更多同学们看到，帮助跟多的同学。 真心希望可以帮助到你。 程序员库森 阿里的学长给你几点实用的建议，按照这个去做，暑期实习不仅能找到，最终秋招也能成为大厂 offer 收割机！ 首先，稳住心态，选好岗位！要知道对于大三的学生来说，没有实习和竞赛经验，是很正常的事情，所以稳住心态，不要过于慌张。 在开始准备找实习前，先要选好岗位。 以技术来说吧，建议选开发，舍去算法，这一点不用说，开发岗位多，竞争小，上岸机会大，我们没必要去卷算法。 开发中，选有后端开发，前端开发，以及移动端开发。如果没有特别的喜好，前端开发更推荐，竞争小，好学，而且大前端趋势很好，薪资也不输后端。 如果想做后端，首选 java，因为 java 岗位是真滴多，以阿里为首的互联网大厂都用 java，其次还有美团，滴滴，百度，京东，快手，携程等等一票互联网大厂，小厂不用说了，基本都是 java 技术栈。 有同学可能问了，java 好多知识点，学完 javase，还有一堆框架，spring，mybatis 等等看，甚至还有分布式，dubbo 等，我学不完啊。 是有这么多技术，学长跟你说，但是面试造火箭啊，按照学长说的方法，有重点的学，不用这么担心。 其次，开始规划，学起来大厂暑期实习，一般 3-4 月开始招人，入职 7-8 月，当然提前去也 ok。认识到这一点非常关键，不要等到暑期才去找实习，那时候别人的都是实习了。 当然，如果没有找到暑期实习呢？ 别担心，没有找到暑期实习，那么可以试试日常实习啊，日常实习也 ok，很多日常实习也有转正机会。暑期和日常没那么大区别，对我们学生来说，只要能有转正机会，待遇没啥差别，能学到东西就 ok。 暑期实习如何找呢？牛客网首推，以及关注各个大厂的招聘公众号等信息。 关键是日常实习，日常实习都是散招，没有统一的招聘，这时候就要拼眼力（资源），推荐几个，boss 直聘、拉勾网、实习僧、牛客网等等。日常实习，有的公司要求会低一些，对于没有找到暑期实习的同学来讲，也是一个不错的选择。 退一万步说，即使没有找到实习也没有关系，我们可以准备项目，只要有亮点就好，因为最终目的是秋招。 实习也是为了秋招，秋招现在开始的越来越早，7 月份已经开始了提前批，以前的金九银十，现在已经变成金八银九了，甚至要更早了。所以认清这个很重要，要开始规划了。 那么如何准备呢，实习和秋招难度没有太大差别，准备实习和秋招都一样，所以现在开始面试的干货。 我这篇文章说过，大厂面试的公式， 库森：能拿 BAT 大厂 offer 的学习路径​zhuanlan.zhihu.com ，这里在简单说下。 进大厂有个公式：技术栈知识 + 计算机基础 + 算法 + 项目 + 实习 + 加分项（竞赛 / 开源项目 / 博客）。 其中，技术栈知识、计算机基础和算法题是必备项，如果项目或者实习很亮眼，面试基本没问题。竞赛、开源项目、博客这些都属于加分项，有了更好，拿 sp 的机会更大。 技术栈知识技术栈知识就是，你要找的岗位的知识，比如找 Java 开发，那就是 Java 开发的一系列知识。 以 Java 开发为例，有这么多知识，见下图： 但是，我们准备面试，不用准备这么多，因为准备不过来！ 那准备哪些？我都给大家汇总好了，就要看高频面试题，我也在不断收集，会同步在 github 仓库： cosen1024/Java-Interview​github.com 目前已经汇总了这么多： 专栏上也有： 库森：《大厂面试》之 JVM 篇 21 问与答​zhuanlan.zhihu.com 库森：《面试小抄》之 Java 基础篇 36 问与答 （2021 最新版）​zhuanlan.zhihu.com 库森：HashMap 精选面试题（2021 版）​zhuanlan.zhihu.com 算法算法题，在笔试和面试中都会遇到，近年来，大厂的笔试题越来越难，因此提升算法更加重要。 算法复习，要重点掌握 10 个数据结构：数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、Trie 树； 10 个算法：递归、排序、二分查找、搜索、哈希算法、贪心算法、分治算法、回溯算法、动态规划、字符串匹配算法。 如何学习呢？可以看书，可以看视频，学长建议《算法 (第 4 版)》比较经典的书籍，了解基本数据结构和算法。至于《算法导论》，看个人情况，有时间和实力就复习，毕竟里面充斥各种算法的正确性、复杂度的证明，看起来头晕，对面试帮助作用较小。 重点在于刷题，一定要刷题！一定要刷题！一定要刷题！ 重要的事情说三遍！刷题首选 Leetcode，至少要刷 200 道，尤其是 hot100，一定要刷。可以按照类别刷，如索、哈希算法、贪心算法、分治算法、回溯算法这样刷，也可以按照顺序刷，因人而异，个人喜欢按照 tag 刷，刷起来效果好，能够举一反三。刷完这些，大厂面试基本没问题了。 其次，如果有精力，想拿高分，尤其是笔试的高分，可以刷起_codeforces_：这是一个国外著名的编程竞赛平台，它在竞赛圈名气比较大。刷起这个，字节、阿里笔试不在是问题！ 计算机基础计算机基础包括计算机网络和操作系统 计算机网络重点掌握： 网络分层概念，TCP 和 UDP 区别及使用场景。 TCP 头部结构，三次握手四次挥手，TCP 可靠性保证手段，滑动窗口，拥塞控制，流量控制。 HTTP 和 HTTPS 区别？Cookie 和 Session 区别？ HTTP 请求报文，浏览器输入网址后发生的事情，GET 和 POST 的区别？ 推荐资料：书籍可以看入门的《图解 TCP/IP 协议》，阅读起来不吃力，适合入门。计算机网络神书书籍《计算机网络：自顶向下》，比国内谢老师的书强太多了！可以看视频哈工大的**计算机网络** 操作系统重点掌握： 进程和线程的区别；进程的通信方式，线程的通信方式 内存管理和 IO 管理 Linux 常用命令，僵尸进程和孤儿进程，Linux 中 swap 的作用? 推荐看《深入理解计算机系统》，在线视频可以看哈工大的操作系统。 项目项目这个非常关键，我汇总了几个经典的 Java 项目，面试足够了，看这篇文章： 去哪里找 JAVA 项目练手？​www.zhihu.com 最后阅读经典的书籍，也是不错的学习方法，汇总了一些经典的计算机类书籍，方便同学学习： https://github.com/cosen1024/awesome-cs-books​github.com 如有收获，顺手点个赞呗，god 说，点赞的都能拿到 offer~ Sept 本人前两年也是相同的境遇，计算机科学与技术专业，学校 985 下游，无竞赛与项目经验，好在大三经过一段时间准备成功找到了一家较好的企业实习。在这里，我以过来人的经验从以下两方面给出建议。 第一，提升信心，发掘自身优势。首先，能够考进 985 学校说明你个人的学习能力和勤奋程度还是有一定优势的，同样，985 学校的本科背景也是一个比较好的敲门砖。可能大公司 985 毕业生普遍一些，但往下走一点，是很有竞争优势的，至少简历不会被卡在学历关。其次，再看一下自身还有哪些优势，比如学科成绩是否比较优秀，有什么能力特长，以及学生会、班干部等学生工作，这些看似不起眼，但都是可以在简历和面试上加分的。 第二，充分准备，提升应试能力。其实，找工作跟考试一样，平时的积累固然重要，临近的准备更加关键。建议预留一段较长的时间好好准备面试，可从以下方面入手: 1. 复习学科知识，强化语言能力。事实上，目前我国的本科培养以学术为主，因此大部分本科毕业生的就业能力并不强。所以，对于校招和实习招聘而言，面试中基础知识的积累是很重要的一部分，既包括计算机核心课程，如数据结构与算法，计算机网络，操作系统等课程知识，也会有 c++ 等具体的编程语言知识提问。准备好这一块的内容，能够给面试官留下很好的印象。 2. 针对刷题训练，丰富面试经验。简历入选后，绝大部分互联网公司的下一大考就是机试。进行充分的刷题训练，让自己能够通过机试进入面试就非常重要。刷题最好有针对性的进行，找准重点，如一些常见字符串处理，树图数据结构应用和贪心、动规等算法，刷题网站像牛客，力扣都是没问题的。另外，可以根据面试的公司去网上找找相关经验和攻略，以便于熟悉面试流程，根据公司的侧重点对症下药。 总而言之，相信自己，好好准备。找工作的确不容易，但也没有你想象的那么难啦。加油！","categories":[],"tags":[]},{"title":"区块链","slug":"区块链","date":"2021-05-02T08:18:55.000Z","updated":"2021-05-02T08:22:40.615Z","comments":true,"path":"2021/05/02/区块链/","link":"","permalink":"http://example.com/2021/05/02/%E5%8C%BA%E5%9D%97%E9%93%BE/","excerpt":"","text":"作者：陈浩链接：https://www.zhihu.com/question/52203328/answer/129444273来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。 最近有不少人问我这个问题，所以更新一下回答。我们把IT领域人才分为四个类别：A类别=&gt;架构师、技术决策者，这类主要指技术总监、技术专家、CTO等。B类别=&gt;主要的代码生产者和维护者，高级软件工程师、如Java/C++/Go/Node等工程师。C类别=&gt;需求产生和归纳者，如BA、产品经理等 强沟通和表达能力的人才；D类别=&gt;表示层，前端架构师、Javascript工程师、h5工程师、视觉设计等；目前区块链领域的工作内容大致可以分为以下几种：1类：为企业搭建私链或者联盟链，并根据业务需求实现联盟链业务逻辑=&gt; AC暂时性稀缺；这类目前Go/C++/Java为主；2类：在既存的公链平台上开发属于自己的应用，例如dAPP类、币乎内容社区类；=&gt; CD稀缺（智能合约多以类js语言开发）,B基本需求；这类编程语言没有限制，主流的编程语言依然是首选项；3类：自己研发公链 =&gt; AB稀缺；目前主流的是静态编译型语言 Go/C++ 为主，也有Rust/Java/C#实现的公链，SPV轻钱包Java、Python、Javascript实现比较常见。目前区块链的业务领域有：———————————F类：金融类tokenization为主，也就是资产数字化，例如ERC20、MST、迅雷链客等，目前商业潜力最大的部分：=&gt; 对AC类人才有稀缺性需求，BD有基本需求=&gt; 2、3类工作内容为主，1可能会有；———————————T1类：区块链技术改进类，旨在改进现有的区块链技术栈而创建的项目，1C0为主，技术发展空间大=&gt; 对AB类人才有稀缺性需求、对CD类有基本需求。=&gt; 3类工作内容为主；———————————T2类：与现有技术结合类，例如结合人工智能，结合IPFS技术等，属于商业合作2B。=&gt; 对ABCD均有稀缺性需求，AB尤为突出；=&gt; 1、3类工作内容为主；———————————G类：游戏与社交类，以太养猫、LeBlock等，属于顶层应用，直接与普通用户接触2C；=&gt; 对CD类人才有稀缺性需求，对AB有基本需求；=&gt; 2类为主，3有涉及———————————E类：区块链生态服务类，例如数字资产交易平台、资产存托、硬件钱包等，目前商业利润最高的产业。=&gt; 存量市场，BCD的需求更为稀缺；=&gt; 可能涉及到2类或3类；——————————–BaaS类：这类是我自己提出的，我在《从区块链即服务（BaaS）到价值互联网》一文中提到了区块链即服务的概念，用区块链服务中心化应用可能是主流，为了降低区块链的开发和应用门槛，云服务的SaaS概念可以延伸到区块链上，2类的开发门槛可以降低到传统IT项目的开发模式，围绕着云计算或雾计算打造应用。总结：以上无论哪个区块链应用种类，都必须熟知主流的区块链项目，了解基本的区块链原理，小广告：可以通过的我极客时间专栏系统性学习区块链知识，获得较为完整的知识结构：极客时间_极客邦科技以下是推荐技能要求，其实无论什么样的工程师想入门区块链，扎实的编程语言知识、扎实的计算机和网络知识是必需的，放到任何行业都是一样的。专业：计算机或数学相关领域专业，经济领域相关专业，双修为佳工作背景：第一，技术有经验者：币圈链圈程序猿（含海外），区块链技术创业者；第二，需求部分，原BA、区块链咨询、互联网金融的产品经理学习区块链，或金融咨询领域深度理解区块链；技术部分，金融（交易）领域程序猿，分布式领域程序猿学习区块链，中等程度理解区块链第三，基本功扎实、勤劳肯学、有悟性的员工自己培养；注意：本回答不构成任何求职或招聘建议，请求职者和招聘单位自行斟酌。转载必需注明出处，并标明：元界CTO陈浩。","categories":[],"tags":[]},{"title":"java 学习路线图_wcxok 的博客 - CSDN 博客","slug":"博客","date":"2021-05-02T06:25:51.000Z","updated":"2021-05-02T06:40:38.258Z","comments":true,"path":"2021/05/02/博客/","link":"","permalink":"http://example.com/2021/05/02/%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"60万年薪的简历 项目（不是必须的，但是很好的加分项，基于 Netty 的项目） 老师的指导","categories":[],"tags":[]},{"title":"bookstore在项目中学习新知识","slug":"bookstore在项目中学习新知识","date":"2021-05-01T23:37:06.000Z","updated":"2021-05-02T00:16:16.380Z","comments":true,"path":"2021/05/02/bookstore在项目中学习新知识/","link":"","permalink":"http://example.com/2021/05/02/bookstore%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%AD%A6%E4%B9%A0%E6%96%B0%E7%9F%A5%E8%AF%86/","excerpt":"","text":"form method=”post”，数据以键值对如果用get提交一个验证用户名和密码的form，一般认为是不安全的存值有几个作用域：page,request,Application,session. 这里是request login.jsp==&gt;LoginServlet==&gt;UserService==&gt;UserDaologin.jspform action=”${pageContext.request.contextPath}/login” method=”post”==&gt;\\ LoginServlet:User user = us.login(username, password);==&gt;UserService: User user = userDao.findUserByUsernameAndPassword(username, password);==&gt;UserDao: public User findUserByUsernameAndPassword(String username , String password) throws SQLException { QueryRunner qr = new QueryRunner(C3P0Utils . getDataSource()); String sql = “select * from user where username = ? and password = ?”; return qr . query(sql, new BeanHandler (User .class ),username, password); }","categories":[],"tags":[]},{"title":"的问题","slug":"的问题","date":"2021-05-01T13:15:34.000Z","updated":"2021-05-01T13:17:21.379Z","comments":true,"path":"2021/05/01/的问题/","link":"","permalink":"http://example.com/2021/05/01/%E7%9A%84%E9%97%AE%E9%A2%98/","excerpt":"","text":"本文由 简悦 SimpRead 转码， 原文地址 www.cnblogs.com 最近在学习 IDEA，由于之前一直使用的是 Eclipse，所以初次接触 IDEA 就接触到了不少的坑，其中最让人头疼的大概就是如何让 IDEA 顺利的启动起来了，这方面我就不细讲了，网上已经有了不少的教程，稍后我也会给大家一个 IDEA 的学习附件，有兴趣的朋友可以看看，今天主要谈的就是如何解决 IDEA 项目在启动时报 404 的问题，相信不少像我一样初次接触 IDEA 的朋友都掉进过这个坑，今天就带大家了解一下这个坑，以及如何解决。 首先，我们来看一下 404 这个页面： 从这个图片我们其实能看出一点点端倪，注意最后一句话：description The requested resource is not available. 这句话翻译过来大概意思是，描述：所请求的资源不可用。 既然是请求资源问题，而 IDEA 又是通过先将项目打包成 war 包，然后创建一个 Tomcat，将 war 进行加载的方式来启动项目，那么我们就可以猜测到，这个请求资源不可用的问题就一定是出现在打包 war 包的过程中，或是在 Tomcat 加载这个 war 包的时候出现的问题。除了这个两个可能，还有一种可能，也是我自己经历的，那就是你的项目是 SVN 项目，而你的 SVN 的路径已经不可用。 知道了原因，那么接下来就好办了，我们一个个来进行解决。 第一步：如何将项目打包成 war 包： 1、首先，右击项目，点击 open module settings 2、配置 project，主要是本地 jdk 的安装路径，还有项目编译输出的路径 3、配置 modules ，其中 paths 定位到 web-inf/classes ；dependencies 加入 jdk 和项目 web-inf/lib 4、配置 libraries ，点击 + 号，选择 java ，然后还是选择你项目的 web-inf/lib 5、配置 facets ，此步很重要，配置 web resource directories ，路径配错，就会报 404 ，一定要定位到项目根目录，也就是下面有整个项目源码的地方 6、 配置 artifacts ，此步选择第二个，选择你的项目即可 注：这有一步很重要，在添加完以后，一定要选中你的项目，然后鼠标左键 Put into Output Root 一下 到此，将项目打包就已经完成了，然后就是将项目添加到 Tomcat。 第二步，将项目添加到 Tomcat： 1. 在 IDEA 的页面右上角，点击此处，打开 Tomcat 添加页面 2. 在新打开的页面添加 Tomcat 3. 在新添加的 Tomcat 页面配置好 Tomcat 的名字，默认浏览器，访问地址，JRE，端口等 在这个页面，我们可以看到，由于没有添加项目 war 包，su9oyouTomcat 还是暴红差的，然后点击 Deploment，去添加项目的 war 包 4. 给 Tomcat 添加已经打包好的 war 包 添加后，可以配置路径的后缀名，我为了省事就直接用 / 了，然后点 Apply 和 OK 就可以了。 5. 然后启动 Tomcat 就可以了，直接访问 localhost 就可以访问项目了。 第三步，解决 SVN 原因访问 404 的原因 如果经历了上边的步骤，你的 Tomcat 不报错，但是你访问还是 404，而且是 SVN 项目的话，你就可以试试看是否是你 SVN 配置的问题了 1. 首先确认是否 SVN 是否能连接上： 如果，你的 SVN 爆了这个错误，你就可以去看看是否是你的配置出错了 2. 重新配置 SVN，点击 File,Settings, 找到 Subversion，将里面的勾选的去掉，然后 Apply,OK 就 OK 了。 3. 可以重新测试一下 SVN 是否能连接上： 4. 然后重新启动 Tomcat，就 OK 了 结语：由于回首也是刚刚开始学用 IDEA，所以也只是分享一下回首自己遇到的坑，如有哪些其他原因而这篇文章没有介绍到的，欢迎小伙伴们在下面的评论区中告知一下，大家一起学习，共同进步！ 最后，如果有觉得回首写得不错的朋友，可以点个赞，或是加个关注，回首会一直和你们分享和共同成长~~~","categories":[],"tags":[]},{"title":"《计算机通信与网络》复习大纲","slug":"计算机网络大三下","date":"2021-04-29T23:48:28.000Z","updated":"2021-04-29T23:49:55.374Z","comments":true,"path":"2021/04/30/计算机网络大三下/","link":"","permalink":"http://example.com/2021/04/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%A7%E4%B8%89%E4%B8%8B/","excerpt":"","text":"《计算机通信与网络》复习大纲 201412第一章 概论1．计算机网络的定义和组成，几种常见的网络拓扑结构的名称。2．计算机网络的体系结构概念3．协议的概念、协议三要素和服务访问点的概念。4．OSI七层模型名称，以及物理层（传输的基本单位：比特）、数据链路层（传输的基本单位：帧）、网络层（传输的基本单位：分组）、传输层、应用层的基本功能。5．TCP/IP体系结构（知道各个协议在哪一层），OSI和TCP/IP的比较。 第二章 数据通信技术基础1．常用的传输媒体（7种，3种有线，4种无线）的名称。2．掌握传信速率（比特率）、传码速率（波特率）、传输时延（发送时延）、传播时延的计算。处理时延概念。3．理解异步、同步传输的概念。4．信道容量的计算（有噪声、无噪声），注意：一个是用到香农公式、一个用到奈奎斯特公式。5．掌握四种常用的多路复用技术的名称，了解工作原理。6．掌握常用的数据交换方式名称（电路交换、报文交换、分组交换），了解其特点。7．物理接口的四个特性名称（机械、电气、功能和规程）以及各自规定的内容。 第三章 数据链路层1．理解数据电路、数据链路的概念。2．掌握数据链路层的功能（7个）。3．理解停止等待协议的工作原理（理解图3-4）4．滑动窗口机制的工作原理和过程（重点关注连续ARQ）。5．HDLC帧类型（三种）、透明传输的概念（0比特插入法）。6．PPP协议的组成（三个部分），协议如何实现数据的透明传输（分两种情况）。7．掌握循环冗余码发送方的编码方法和接收方检测方法，汉明距离和纠检错能力的关系。应重点关注的例题：例3-1、3-3、3-4 第三章 局域网与广域网 局域网的四个技术特性名称（传输媒体、传输技术、网络拓扑和媒体访问控制方法）。 局域网的数据链路层分成的两个子层名称。 局域网的标准（重点：802.3、802.11所表示的含义）。 CSMA/CD的原理（介质访问控制方法、争用期、以太网帧结构、最小帧长的计算）。 10BASE-5,10BASE-2,10BASE-T,10BASE-F的含义。（10、BASE、2、5、T、F的含义）6．集线器、网桥、以太网交换机和路由器工作的层次、带宽的计算（如习题4.5）；理解透明网桥的工作原理，包括网桥转发表的维护和转发原理。7．了解以太网交换机转发帧的三种方式（存储转发、直通、无碎片直通）原理。以太网交换机如何根据帧的目的地址控制转发，实现帧过滤？8．VLAN的概念、无线局域网分类，WiFi常用的协议标准。9．无线局域网中不能采用CSMA/CD的原因，理解CSMA/CA的工作原理（DIFS,SIFS,确认机制,虚侦听,随机退避,信道预约）。 X.25、帧中继、ATM虚电路分别在哪一层提供虚电路服务；ATM信元的长度，首部长度。应重点关注的例题：例4-1 第四章 网络互连1．理解IP地址的分类，掌握IP地址的分配（如例5-1）。2．掌握ARP的作用以及以太网中ARP的工作过程。3．掌握IPv4数据报首部的分析（20字节）（如习题5.20）4．掌握分片的计算。5．子网的划分和计算，网络掩码的表示和计算。(如习题5.16)6．CIDR的原理和地址块的分配，路由聚合计算。7．ICMP 报文类型和作用，ping 和 tracert 两个程序的目的和实现原理。9．外部网关协议和内部网关协议的基本概念。RIP、OSPF是什么类型路由协议，各使用什么算法？ RIP最大跳数是多少？10．了解RIP、OSPF和BGP的要点，掌握书上RIP路由更新的例子。11．路由器的组成（路由选择和分组转发两个部分），直接交付和间接交付的概念。12．掌握NAT的功能和实现VPN的两种技术。13．IPv6中IP地址的长度，基本首部的长度，了解IP地址类型，IPv6地址表达方法，零压缩使用方法。应重点关注的例题：例5-1、5-3、5-6、5-7重点关注的课后习题：5.3、5.7、5.15、5.16、5.17、5.20 第五章 传输层1．传输层的功能。UDP提供什么服务？UDP格式，端口、套接字的概念。2．TCP的基本概念、报文段的格式，TCP提供的服务类型。伪首部的作用3．掌握TCP的连接建立、释放过程。4．理解TCP中的可变滑动窗口的流量控制方法的工作过程，理解TCP报文段序号和确认号含义。5．掌握TCP的慢启动算法和拥塞避免算法的工作过程。6．掌握TCP报文段的分析。 应重点关注的例题：例6-10重点关注的课后习题：6.2、6.5 第六章 应用层1．描述DNS中主机名至IP地址的域名解析过程。2．网络应用模式3．FTP应用的两个连接名称和作用4．一个计算机访问因特网需要配置的项目（4个：主机的IP地址、子网掩码、默认路由器的IP地址、域名服务器的IP地址）。DHCP的基本概念。5．电子邮件的发送和接收过程。6．SMTP的作用是什么？MIME和SMTP的关系。7．WWW和HTTP、URL的基本概念。重点关注的课后习题：7.3、7.9、7.18 第七章 网络管理和网络安全 网络攻击形式：主动攻击和被动攻击两大类若干具体形式。 习题8.13 衡量网络安全的指标主要有网络系统的可靠性、可用性、保密性、完整性、不可抵赖性，在P284 网络管理5个主要功能 P272 SNMP的3个基本元素：管理者、代理和MIB。 P278","categories":[],"tags":[]},{"title":"aaa","slug":"aaa","date":"2021-04-29T11:31:03.000Z","updated":"2021-04-29T11:33:34.872Z","comments":true,"path":"2021/04/29/aaa/","link":"","permalink":"http://example.com/2021/04/29/aaa/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"面筋整理","slug":"面筋整理","date":"2021-04-29T11:22:26.000Z","updated":"2021-04-29T11:27:43.409Z","comments":true,"path":"2021/04/29/面筋整理/","link":"","permalink":"http://example.com/2021/04/29/%E9%9D%A2%E7%AD%8B%E6%95%B4%E7%90%86/","excerpt":"","text":"一、 Java基础 ArrayList, Vector,LinkedList名称 初始大小 扩容方式 其他ArrayList 10 1.5倍Vector 10 如果有扩容因子，则+扩容因子，否则变为原来的两倍LinkedList 双向队列来实现的 深入理解String、StringBuffer、StringBuilder（1）StringBuilder和StringBuffer类拥有的成员属性以及成员方法基本相同，区别是StringBuffer类的成员方法前面多了一个关键字：synchronized，不用多说，这个关键字是在多线程访问时起到安全保护作用的,也就是说StringBuffer是线程安全的。(2) 1.StringBuffer的的初始大小为（16+初始字符串长度）即capacity=16+初始字符串长度；一旦length大于capacity时，capacity便在前一次的基础上加1后倍增； ThreadLocal 首先，在每个线程Thread内部有一个ThreadLocal.ThreadLocalMap类型的成员变量threadLocals，这个threadLocals就是用来存储实际的变量副本的，键值为当前ThreadLocal变量，value为变量副本（即T类型的变量）。 JAVA 对象分配过程 Java中Set集合是如何实现添加元素保证不重复的？https://www.cnblogs.com/wupeixuan/p/8858816.html 重写equals()方法就必须重写hashCode()方法的原因（https://blog.csdn.net/u013679744/article/details/57074669）hashCode()和equals()保持一致，如果equals方法返回true，那么两个对象的hasCode()返回值必须一样。如果equals方法返回false，hashcode可以不一样，但是这样不利于哈希表的性能，一般我们也不要这样做。重写equals()方法就必须重写hashCode()方法的原因也就显而易见了。hashCode()返回不相等，则equals（）也一定不相等 假设两个对象，重写了其equals方法，其相等条件是属性相等，就返回true。如果不重写hashcode方法，其返回的依然是两个对象的内存地址值，必然不相等。这就出现了equals方法相等，但是hashcode不相等的情况。这不符合hashcode的规则。下边，会介绍在集合框架中，这种情况会导致的严重问题。 JVM参数 线程安全的概念当多个线程访问同一个类（方法或对象）时，这个类始终都能表现出正确的行为，那么这个类(方法或对象)就是线程安全的。 Java IO中涉及到的哪些类以及哪些设计模式 模板方法与适配器的比较 二、 Mysql Innodb与Myisam的区别 limit查询的优化方法 mvcchttps://blog.csdn.net/whoamiyang/article/details/51901888 查询前三名select * from tablename a where score in ( select top 3 score from tablename b where a.classid=b.classid order by score desc); 最左前缀 内连接、外连接、左连接 索引失效 主键索引和唯一索引的区别 Mysql优化 Explainhttps://www.cnblogs.com/xuanzhi201111/p/4175635.html 慢查询日志https://www.cnblogs.com/luyucheng/p/6265594.html Profilehttps://blog.csdn.net/sj349781478/article/details/78224713 三、 Redis 为什么使用redis （1）性能我们在碰到需要执行耗时特别久，且结果不频繁变动的SQL，就特别适合将运行结果放入缓存。这样，后面的请求就去缓存中读取，使得请求能够迅速响应。（2）并发在大并发的情况下，所有的请求直接访问数据库，数据库会出现连接异常。这个时候，就需要使用redis做一个缓冲操作，让请求先访问到redis，而不是直接访问数据库。 使用redis有什么缺点(一)缓存和数据库双写一致性问题(二)缓存雪崩问题(三)缓存击穿问题(四)缓存的并发竞争问题 单线程的redis为什么这么快(一)纯内存操作(二)单线程操作，避免了频繁的上下文切换(三)采用了非阻塞I/O多路复用机制 redis的数据类型，以及每种数据类型的使用场景 (1)String这个其实没啥好说的，最常规的set/get操作，value可以是String也可以是数字。一般做一些复杂的计数功能的缓存， 锁， (2)hash这里value存放的是结构化的对象，比较方便的就是操作其中的某个字段。博主在做单点登录的时候，就是用这种数据结构存储用户信息，以cookieId作为key，设置30分钟为缓存过期时间，能很好的模拟出类似session的效果。 (3)list使用List的数据结构，可以做简单的消息队列的功能。另外还有一个就是，可以利用lrange命令，做基于redis的分页功能，性能极佳，用户体验好。本人还用一个场景，很合适—取行情信息。就也是个生产者和消费者的场景。LIST可以很好的完成排队，先进先出的原则。 (4)set因为set堆放的是一堆不重复值的集合。所以可以做全局去重的功能。为什么不用JVM自带的Set进行去重？因为我们的系统一般都是集群部署，使用JVM自带的Set，比较麻烦，难道为了一个做一个全局去重，再起一个公共服务，太麻烦了。另外，就是利用交集、并集、差集等操作，可以计算共同喜好，全部的喜好，自己独有的喜好等功能。 (5)sorted setsorted set多了一个权重参数score,集合中的元素能够按score进行排列。可以做排行榜应用，取TOP N操作。 redis的过期策略以及内存淘汰机制(1)redis采用的是定期删除+惰性删除策略。为什么不用定时删除策略?定时删除,用一个定时器来负责监视key,过期则自动删除。虽然内存及时释放，但是十分消耗CPU资源。在大并发请求下，CPU要将时间应用在处理请求，而不是删除key,因此没有采用这一策略. (2) 定期删除+惰性删除是如何工作的呢?定期删除，redis默认每个100ms检查，是否有过期的key,有过期key则删除。需要说明的是，redis不是每个100ms将所有的key检查一次，而是随机抽取进行检查(如果每隔100ms,全部key进行检查，redis岂不是卡死)。因此，如果只采用定期删除策略，会导致很多key到时间没有删除。于是，惰性删除派上用场。也就是说在你获取某个key的时候，redis会检查一下，这个key如果设置了过期时间那么是否过期了？如果过期了此时就会删除。 (3) 内存淘汰机制采用定期删除+惰性删除就没其他问题了么?不是的，如果定期删除没删除key。然后你也没即时去请求key，也就是说惰性删除也没生效。这样，redis的内存会越来越高。那么就应该采用内存淘汰机制。在redis.conf中有一行配置。 maxmemory-policy volatile-lru该配置就是配内存淘汰策略的(什么，你没配过？好好反省一下自己)1）noeviction：当内存不足以容纳新写入数据时，新写入操作会报错。应该没人用吧。2）allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key。推荐使用，目前项目在用这种。3）allkeys-random：当内存不足以容纳新写入数据时，在键空间中，随机移除某个key。应该也没人用吧，你不删最少使用Key,去随机删。4）volatile-lru：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的key。这种情况一般是把redis既当缓存，又做持久化存储的时候才用。不推荐5）volatile-random：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个key。依然不推荐6）volatile-ttl：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的key优先移除。不推荐ps：如果没有设置 expire 的key, 不满足先决条件(prerequisites); 那么 volatile-lru, volatile-random 和 volatile-ttl 策略的行为, 和 noeviction(不删除) 基本上一致。 volatile和allkeys规定了是对已设置过期时间的数据集淘汰数据还是从全部数据集淘汰数据，后面的lru、ttl以及random是三种不同的淘汰策略，再加上一种no-enviction永不回收的策略。 (4) 最大缓存配置 在 redis 中，允许用户设置最大使用内存大小server.maxmemory默认为0，没有指定最大缓存，如果有新的数据添加，超过最大内存，则会使redis崩溃，所以一定要设置。redis 内存数据集大小上升到一定大小的时候，就会实行数据淘汰策略 (5)使用策略 1、如果数据呈现幂律分布，也就是一部分数据访问频率高，一部分数据访问频率低，则使用allkeys-lru2、如果数据呈现平等分布，也就是所有的数据访问频率都相同，则使用allkeys-random三种数据淘汰策略：ttl和random比较容易理解，实现也会比较简单。主要是Lru最近最少使用淘汰策略，设计上会对key 按失效时间排序，然后取最先失效的key进行淘汰 redis和数据库双写一致性问题分析:一致性问题是分布式常见问题，还可以再分为最终一致性和强一致性。数据库和缓存双写，就必然会存在不一致的问题。答这个问题，先明白一个前提。就是如果对数据有强一致性要求，不能放缓存。我们所做的一切，只能保证最终一致性。另外，我们所做的方案其实从根本上来说，只能说降低不一致发生的概率，无法完全避免。因此，有强一致性要求的数据，不能放缓存。 首先，采取正确更新策略，先更新数据库，再更新缓存。其次，因为可能存在更新缓存失败的问题，提供一个补偿措施即可，例如利用消息队列。 如何应对缓存穿透和缓存雪崩问题（1）缓存穿透，即黑客故意去请求缓存中不存在的数据，导致所有的请求都怼到数据库上，从而数据库连接异常。解决方案:(a)利用互斥锁，缓存失效的时候，先去获得锁，得到锁了，再去请求数据库。没得到锁，则休眠一段时间重试(b) 返回空，另外也有一个更为简单粗暴的方法（我们采用的就是这种），如果一个查询返回的数据为空（不管是数 据不存在，还是系统故障），我们仍然把这个空结果进行缓存，但它的过期时间会很短，最长不超过五分钟。(c)提供一个能迅速判断请求是否有效的拦截机制，比如，利用布隆过滤器，内部维护一系列合法有效的key。迅速判断出，请求所携带的Key是否合法有效。如果不合法，则直接返回。 （2）缓存雪崩，即缓存同一时间大面积的失效，这个时候又来了一波请求，结果请求都怼到数据库上，从而导致数据库连接异常。(a)给缓存的失效时间，加上一个随机值，避免集体失效。(b)使用互斥锁，但是该方案吞吐量明显下降了。(c)双缓存。我们有两个缓存，缓存A和缓存B。缓存A的失效时间为20分钟，缓存B不设失效时间。自己做缓存预热操作。然后细分以下几个小点I 从缓存A读数据库，有则直接返回II A没有数据，直接从B读数据，直接返回，并且异步启动一个更新线程。III 更新线程同时更新缓存A和缓存B。8. 如何解决redis的并发竞争key问题 分析:这个问题大致就是，同时有多个子系统去set一个key。这个时候要注意什么呢？大家思考过么。需要说明一下，博主提前百度了一下，发现答案基本都是推荐用redis事务机制。博主不推荐使用redis的事务机制。因为我们的生产环境，基本都是redis集群环境，做了数据分片操作。你一个事务中有涉及到多个key操作的时候，这多个key不一定都存储在同一个redis-server上。因此，redis的事务机制，十分鸡肋。 回答:如下所示(1)如果对这个key操作，不要求顺序这种情况下，准备一个分布式锁，大家去抢锁，抢到锁就做set操作即可，比较简单。 (2)如果对这个key操作，要求顺序假设有一个key1,系统A需要将key1设置为valueA,系统B需要将key1设置为valueB,系统C需要将key1设置为valueC.期望按照key1的value值按照 valueA–&gt;valueB–&gt;valueC的顺序变化。这种时候我们在数据写入数据库的时候，需要保存一个时间戳。假设时间戳如下系统A key 1 {valueA 3:00}系统B key 1 {valueB 3:05}系统C key 1 {valueC 3:10}那么，假设这会系统B先抢到锁，将key1设置为{valueB 3:05}。接下来系统A抢到锁，发现自己的valueA的时间戳早于缓存中的时间戳，那就不做set操作了。以此类推。其他方法，比如利用队列，将set方法变成串行访问也可以。总之，灵活变通。 redis常见性能问题和解决方案 1).Master写内存快照，save命令调度rdbSave函数，会阻塞主线程的工作，当快照比较大时对性能影响是非常大的，会间断性暂停服务，所以Master最好不要写内存快照。2).Master AOF持久化，如果不重写AOF文件，这个持久化方式对性能的影响是最小的，但是AOF文件会不断增大，AOF文件过大会影响Master重启的恢复速度。Master最好不要做任何持久化工作，包括内存快照和AOF日志文件，特别是不要启用内存快照做持久化,如果数据比较关键，某个Slave开启AOF备份数据，策略为每秒同步一次。3).Master调用BGREWRITEAOF重写AOF文件，AOF在重写的时候会占大量的CPU和内存资源，导致服务load过高，出现短暂服务暂停现象。4). Redis主从复制的性能问题，为了主从复制的速度和连接的稳定性，Slave和Master最好在同一个局域网内 Redis之AOF重写及其实现原理（https://blog.csdn.net/hezhiqiang1314/article/details/69396887） Redis的特点Redis本质上是一个Key-Value类型的内存数据库，很像memcached，整个数据库统统加载在内存当中进行操作，定期通过异步操作把数据库数据flush到硬盘上进行保存。因为是纯内存操作，Redis的性能非常出色，每秒可以处理超过 10万次读写操作，是已知性能最快的Key-Value DB。Redis的出色之处不仅仅是性能，Redis最大的魅力是支持保存多种数据结构，此外单个value的最大限制是1GB，不像 memcached只能保存1MB的数据，因此Redis可以用来实现很多有用的功能，比方说用他的List来做FIFO双向链表，实现一个轻量级的高性 能消息队列服务，用他的Set可以做高性能的tag系统等等。另外Redis也可以对存入的Key-Value设置expire时间，因此也可以被当作一 个功能加强版的memcached来用。Redis的主要缺点是数据库容量受到物理内存的限制，不能用作海量数据的高性能读写，因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。 使用redis有哪些好处？(1) 速度快，因为数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O(1)(2) 支持丰富数据类型，支持string，list，set，sorted set，hash(3) 支持事务，操作都是原子性，所谓的原子性就是对数据的更改要么全部执行，要么全部不执行(4) 丰富的特性：可用于缓存，消息，按key设置过期时间，过期后将会自动删除 Redis事务为什么不支持回滚在事务运行期间，虽然Redis命令可能会执行失败，但是Redis仍然会执行事务中余下的其他命令，而不会执行回滚操作，你可能会觉得这种行为很奇怪。然而，这种行为也有其合理之处：只有当被调用的Redis命令有语法错误时，这条命令才会执行失败（在将这个命令放入事务队列期间，Redis能够发现此类问题），或者对某个键执行不符合其数据类型的操作：实际上，这就意味着只有程序错误才会导致Redis命令执行失败，这种错误很有可能在程序开发期间发现，一般很少在生产环境发现。 Redis已经在系统内部进行功能简化，这样可以确保更快的运行速度，因为Redis不需要事务回滚的能力。对于Redis事务的这种行为，有一个普遍的反对观点，那就是程序有可能会有缺陷（bug）。但是，你应当注意到：事务回滚并不能解决任何程序错误。例如，如果某个查询会将一个键的值递增2，而不是1，或者递增错误的键，那么事务回滚机制是没有办法解决这些程序问题的。请注意，没有人能解决程序员自己的错误，这种错误可能会导致Redis命令执行失败。正因为这些程序错误不大可能会进入生产环境，所以我们在开发Redis时选用更加简单和快速的方法，没有实现错误回滚的功能。 mySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据 相关知识：redis 内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略（回收策略）。redis 提供 6种数据淘汰策略：volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰no-enviction（驱逐）：禁止驱逐数据 redis事物的了解CAS(check-and-set 操作实现乐观锁 )?事务的实现特征： 1). 在事务中的所有命令都将会被串行化的顺序执行，事务执行期间，Redis不会再为其它客户端的请求提供任何服务，从而保证了事物中的所有命令被原子的执行。2). 和关系型数据库中的事务相比，在Redis事务中如果有某一条命令执行失败，其后的命令仍然会被继续执行。3). 我们可以通过MULTI命令开启一个事务，有关系型数据库开发经验的人可以将其理解为”BEGIN TRANSACTION”语句。在该语句之后执行的命令都将被视为事务之内的操作，最后我们可以通过执行EXEC/DISCARD命令来提交/回滚该事务内的所有操作。这两个Redis命令可被视为等同于关系型数据库中的COMMIT/ROLLBACK语句。4). 在事务开启之前，如果客户端与服务器之间出现通讯故障并导致网络断开，其后所有待执行的语句都将不会被服务器执行。然而如果网络中断事件是发生在客户端执行EXEC命令之后，那么该事务中的所有命令都会被服务器执行。5). 当使用Append-Only模式时，Redis会通过调用系统函数write将该事务内的所有写操作在本次调用中全部写入磁盘。然而如果在写入的过程中出现系统崩溃，如电源故障导致的宕机，那么此时也许只有部分数据被写入到磁盘，而另外一部分数据却已经丢失。Redis服务器会在重新启动时执行一系列必要的一致性检测，一旦发现类似问题，就会立即退出并给出相应的错误提示。此时，我们就要充分利用Redis工具包中提供的redis-check-aof工具，该工具可以帮助我们定位到数据不一致的错误，并将已经写入的部分数据进行回滚。修复之后我们就可以再次重新启动Redis服务器了。 WATCH命令和基于CAS的乐观锁 在Redis的事务中，WATCH命令可用于提供CAS(check-and-set)功能。假设我们通过WATCH命令在事务执行之前监控了多个Keys，倘若在WATCH之后有任何Key的值发生了变化，EXEC命令执行的事务都将被放弃，同时返回Null multi-bulk应答以通知调用者事务执行失败。例如，我们再次假设Redis中并未提供incr命令来完成键值的原子性递增，如果要实现该功能，我们只能自行编写相应的代码。其伪码如下：val = GET mykeyval = val + 1SET mykey $val以上代码只有在单连接的情况下才可以保证执行结果是正确的，因为如果在同一时刻有多个客户端在同时执行该段代码，那么就会出现多线程程序中经常出现的一种错误场景–竞态争用(race condition)。比如，客户端A和B都在同一时刻读取了mykey的原有值，假设该值为10，此后两个客户端又均将该值加一后set回Redis服务器，这样就会导致mykey的结果为11，而不是我们认为的12。为了解决类似的问题，我们需要借助WATCH命令的帮助，见如下代码：WATCH mykeyval = GET mykeyval = val + 1MULTISET mykey $valEXEC和此前代码不同的是，新代码在获取mykey的值之前先通过WATCH命令监控了该键，此后又将set命令包围在事务中，这样就可以有效的保证每个连接在执行EXEC之前，如果当前连接获取的mykey的值被其它连接的客户端修改，那么当前连接的EXEC命令将执行失败。这样调用者在判断返回值后就可以获悉val是否被重新设置成功。 redis持久化的几种方式1、快照（snapshots）缺省情况情况下，Redis把数据快照存放在磁盘上的二进制文件中，文件名为dump.rdb。你可以配置Redis的持久化策略，例如数据集中每N秒钟有超过M次更新，就将数据写入磁盘；或者你可以手工调用命令SAVE或BGSAVE。工作原理． Redis forks.． 子进程开始将数据写到临时RDB文件中。． 当子进程完成写RDB文件，用新文件替换老文件。． 这种方式可以使Redis使用copy-on-write技术。2、AOF快照模式并不十分健壮，当系统停止，或者无意中Redis被kill掉，最后写入Redis的数据就会丢失。这对某些应用也许不是大问题，但对于要求高可靠性的应用来说，Redis就不是一个合适的选择。Append-only文件模式是另一种选择。你可以在配置文件中打开AOF模式 3、虚拟内存方式当你的key很小而value很大时,使用VM的效果会比较好.因为这样节约的内存比较大.当你的key不小时,可以考虑使用一些非常方法将很大的key变成很大的value,比如你可以考虑将key,value组合成一个新的value.vm-max-threads这个参数,可以设置访问swap文件的线程数,设置最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的.可能会造成比较长时间的延迟,但是对数据完整性有很好的保证.自己测试的时候发现用虚拟内存性能也不错。如果数据量很大，可以考虑分布式或者其他数据库 Redis生存时间 1、影响生存时间的一些操作生存时间可以通过使用 DEL 命令来删除整个 key 来移除，或者被 SET 和 GETSET 命令覆盖原来的数据，也就是说，修改key对应的value和使用另外相同的key和value来覆盖以后，当前数据的生存时间不同。比如说，对一个 key 执行INCR命令，对一个列表进行LPUSH命令，或者对一个哈希表执行HSET命令，这类操作都不会修改 key 本身的生存时间。另一方面，如果使用RENAME对一个 key 进行改名，那么改名后的 key的生存时间和改名前一样。 RENAME命令的另一种可能是，尝试将一个带生存时间的 key 改名成另一个带生存时间的 another_key ，这时旧的 another_key (以及它的生存时间)会被删除，然后旧的 key 会改名为 another_key ，因此，新的 another_key 的生存时间也和原本的 key 一样。使用PERSIST命令可以在不删除 key 的情况下，移除 key 的生存时间，让 key 重新成为一个persistent key 。 2、如何更新生存时间可以对一个已经带有生存时间的 key 执行EXPIRE命令，新指定的生存时间会取代旧的生存时间。过期时间的精度已经被控制在1ms之内，主键失效的时间复杂度是O（1），EXPIRE和TTL命令搭配使用，TTL可以查看key的当前生存时间。设置成功返回 1；当 key 不存在或者不能为 key 设置生存时间时，返回 0 。 redis 最适合的场景 （1）会话缓存（Session Cache）最常用的一种使用Redis的情景是会话缓存（session cache）。用Redis缓存会话比其他存储（如Memcached）的优势在于：Redis提供持久化。当维护一个不是严格要求一致性的缓存时，如果用户的购物车信息全部丢失，大部分人都会不高兴的，现在，他们还会这样吗？幸运的是，随着 Redis 这些年的改进，很容易找到怎么恰当的使用Redis来缓存会话的文档。甚至广为人知的商业平台Magento也提供Redis的插件。 （2）作者：构造函数 除基本的会话token之外，Redis还提供很简便的FPC平台。回到一致性问题，即使重启了Redis实例，因为有磁盘的持久化，用户也不会看到页面加载速度的下降，这是一个极大改进，类似PHP本地FPC。 如果这个redis正在给线上的业务提供服务，那使用keys指令会有什么问题？ 这个时候你要回答redis关键的一个特性：redis的单线程的。keys指令会导致线程阻塞一段时间，线上服务会停顿，直到指令执行完毕，服务才能恢复。这个时候可以使用scan指令，scan指令可以无阻塞的提取出指定模式的key列表，但是会有一定的重复概率，在客户端做一次去重就可以了，但是整体所花费的时间会比直接用keys指令长。 使用过Redis做异步队列么，你是怎么用的？一般使用list结构作为队列，rpush生产消息，lpop消费消息。当lpop没有消息的时候，要适当sleep一会再重试。 如果对方追问可不可以不用sleep呢？list还有个指令叫blpop，在没有消息的时候，它会阻塞住直到消息到来。 如果对方追问能不能生产一次消费多次呢？使用pub/sub主题订阅者模式，可以实现1:N的消息队列。 如果对方追问redis如何实现延时队列？使用sortedset，拿时间戳作为score，消息内容作为key调用zadd来生产消息，消费者用zrangebyscore指令获取N秒之前的数据轮询进行处理。 如果有大量的key需要设置同一时间过期，一般需要注意什么？如果大量的key过期时间设置的过于集中，到过期的那个时间点，redis可能会出现短暂的卡顿现象。一般需要在时间上加一个随机值，使得过期时间分散一些。 Redis如何做持久化的？ bgsave做镜像全量持久化，aof做增量持久化。因为bgsave会耗费较长时间，不够实时，在停机的时候会导致大量丢失数据，所以需要aof来配合使用。在redis实例重启时，会使用bgsave持久化文件重新构建内存，再使用aof重放近期的操作指令来实现完整恢复重启之前的状态。 对方追问如果突然机器掉电会怎样？取决于aof日志sync属性的配置，如果不要求性能，在每条写指令时都sync一下磁盘，就不会丢失数据。但是在高性能的要求下每次都sync是不现实的，一般都使用定时sync，比如1s1次，这个时候最多就会丢失1s的数据。 对方追问bgsave的原理是什么？你给出两个词汇就可以了，fork和cow。fork是指redis通过创建子进程来进行bgsave操作，cow指的是copy on write，子进程创建后，父子进程共享数据段，父进程继续提供读写服务，写脏的页面数据会逐渐和子进程分离开来。 Pipeline有什么好处，为什么要用pipeline？（https://blog.csdn.net/u011489043/article/details/78769428） Redis的同步机制了解么？Redis可以使用主从同步，从从同步。第一次同步时，主节点做一次bgsave，并同时将后续修改操作记录到内存buffer，待完成后将rdb文件全量同步到复制节点，复制节点接受完成后将rdb镜像加载到内存。加载完成后，再通知主节点将期间修改的操作记录同步到复制节点进行重放就完成了同步过程。 是否使用过Redis集群，集群的原理是什么？ Redis Sentinal着眼于高可用，在master宕机时会自动将slave提升为master，继续提供服务。 Redis Cluster着眼于扩展性，在单个redis内存不足时，使用Cluster进行分片存储。 对于大量的请求怎么样处理redis是一个单线程程序，也就说同一时刻它只能处理一个客户端请求；redis是通过IO多路复用（select，epoll, kqueue，依据不同的平台，采取不同的实现）来处理多个客户端请求的，伪代码： redis、zk实现锁区别 四、 数据结构 逆波兰式https://blog.csdn.net/wcybrain/article/details/56676287 五、 Spring AOP是怎么实现的，有几种方式 spingIOC如何保存对象的https://blog.csdn.net/jiangyu1013/article/details/72654373 springIoc体系结构https://blog.csdn.net/qq_34173549/article/details/79929071 @Autowired 与@Resource的区别 Bean初始化方法 手写springIOChttp://www.cnblogs.com/1016882435AIDA/p/5970280.html 手写springAOPhttps://www.cnblogs.com/1016882435AIDA/p/5980770.html bean的加载流程https://segmentfault.com/a/1190000012887776#articleHeader3 六、 SpringMVC七、 Mybatis八、 操作系统 进程与线程 1、进程的目的就是担当分配系统资源（CPU时间、内存等）的基本单位。2、线程是进程的一个执行流，是CPU调度和分派的基本单位，它是比进程更小的能独立运行的基本单位3、进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。但对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程。 操作系统基本概念 进程管理进程控制（进程与线程、进程状态的切换、进程调度算法）、进程同步（临界区、同步与互斥、信号量）、进程通信（管道、共享存储、消息队列、套接字）、死锁处理（死锁必要条件、死锁检测与恢复、死锁预防、死锁避免）、处理机调度等。 内存管理内存分配、地址映射、内存保护与共享、虚拟内存等。 文件管理文件存储空间的管理、目录管理、文件读写管理和保护等。 设备管理完成用户的 I/O 请求，方便用户使用各种设备，并提高设备的利用率。主要包括缓冲管理、设备分配、设备处理、虛拟设备等。 进程状态的切换 进程调度算法 进程同步1、临界区 2、同步与互斥 3、信号量 操作系统作业调度 进程通信 死锁1、死锁的必要条件 1)互斥条件。在一段时间内，某资源只能被一个进程占用，如果此时还有其他进程请求资源，则请求进程只能等待，直至占有该资源的进程用完释放。2）请求和等待。进程已经保持了至少一个资源，但又提出了新的资源请求，而改资源已被其他进程占有，此时请求进程被阻塞 但对自己已获得的资源保持不放。3）不可抢占条件。进程已获得的资源在未使用完之前不能被抢占，只能在进程使用完时自己释放。4）循环等待条件。存在一个进程资源的循环链 2、死锁的处理方法 1）鸵鸟策略 2）死锁检测与死锁恢复 A、每种类型一个资源的死锁检测 B、每种类型多个资源的死锁检测 C、死锁恢复 3、死锁预防非互斥条件是非共享设备所必须的，不仅不能改变，还应加以保证。A、 破坏“请求和保持” 一种实现方式是规定所有进程在开始执行前请求所需要的全部资源；二是允许一个进程只获取运行初期所需的资源后，便开始运行。B、 破坏“不可抢占”当一个已经保持了某些不可被抢占资源的进程，提出新的资源请求而不能得到满足时，它必须释放已经保持的所有资源，待以后需要时再重新申请。C、 破环“循环等待”给资源统一编号，进程只能按编号顺序来请求资源。 4、死锁避免 银行家算法9. 页面置换算法 1） 最佳置换算法 2） 先进先出页面置换算法 3） 最近最久未使用 4） 最少使用置换算法 磁盘调度算法 用户态和内核态 IO,BIO,NIO,同步,异步 五种IO模型： 信号与信号量的区别 信号：（signal）是一种处理异步事件的方式。信号是比较复杂的通信方式，用于通知接受进程有某种事件发生，除了用于进程外，还可以发送信号给进程本身。 信号量：（Semaphore）进程间通信处理同步互斥的机制。是在多线程环境下使用的一种设施, 它负责协调各个线程, 以保证它们能够正确、合理的使用公共资源。 九、 Linux 文件属性 Linux命令Locate WhereIs Find Awkawk是行处理器:相比较屏幕处理的优点，在处理庞大文件时不会出现内存溢出或是处理缓慢的问题，通常用来格式化文本信息awk处理过程: 依次对每一行进行处理，然后输出 print $0 就是打印整行内容（$0前面不需要反斜杠），print $1表示只打印每行第一个字段 Sed 十、 网络I/O模型 十一、 计算机网络 tcp和udp的区别UDP特点：1） 无连接的2） 最大努力交付3） 面向报文的，UDP对应用层交下来的报文，既不合并也不拆分，而是保留这些报文的边界。4） 支持一对一，一对多5） udp没有拥塞控制。网络中出现的拥塞不会使源主机发送速率降低. TCP特点： 面向连接的运输层协议； 每一条tcp连接只能是点对点 TCP提供可靠交付的服务 面向字节流 可靠传输的工作原理https://blog.csdn.net/scu_cindy/article/details/74529287 1） 以字节为单位的滑动窗口发送窗口：在没有收到B的确认的情况下,A可以连续把窗口内的数据都发送出去。凡是已经发送过的数据，在未收到确认之前都必须暂时保存，以便在超时重传时使用。 强调：1、A的发送窗口是根据B的接收窗口设置的。但在同一时刻，A的发送窗口并不是和B的接受窗口一样大，需要考虑拥塞控制；2、对于不按序到达的数据应如何处理，TCP标准并没规定。一般是临时缓存。3、TCP要求接收方必须有累计确认的功能，这样可以减少传输开销。接收方可以在合适的时候发送确认，也可以在自己有数据要发送的时候把确认消息捎上 2） 超时重传时间选择TCP采用自适应算法，记录报文段的发出时间和相应的确认的时间。两个只差就是报文段的往返时间RTT 3） 选择确认SACK只传送缺少的数据而不重传已经正确到达接收方的数据 TCP的拥塞控制1、拥塞控制与流量控制拥塞控制：防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提：网络能够承受现有的网络负荷。拥塞控制是一个全局性的过程，涉及到所有的主机、路由器，以及与降低网络传输性能有关的所有因素。流量控制：指点对点通信量的控制，是端到端正的问题。流量控制所要做的就是抑制发送端发送数据的速率，以便使接收端来得及接收 2、几种拥塞控制的方法 三次握手 四次挥手 MSL：最长报文段寿命 计算机网络体系结构 CSMA/CD 协议 网络层 HTTP请求过程 https://blog.csdn.net/lingzhm/article/details/44977563 HTTP特点及1.0、1.1、2.0的区别 HTTP2.0 HTTP请求 get和post的区别 DNS HTTP VS HTTPs 怎样实现UDP可靠传输 十二、 分布式理论 CAP理论和BASE理论（1） CAP理论：一个分布式系统不可能同时满足一致性（C：Consistency）、可用性（A：Availability）和分区容错性（P：Partition tolerance）这三个基本需求，最多只能同时满足其中两项。 一致性：在分布式环境下，一致性是指数据在多个副本之间能否保持一致的特性 可用性：系统提供的服务必须一直处于可用的状态，对于用户的每一个操作请求总是能够在有限的时间内返回结果。 分区容错性：分布式系统在遇到任何网络分区故障的时候，仍然需要能够保证对外提供满足一致性和可用性的服务。除非是整个网络环境都发生了故障。网络分区是指各个子网络出现不连通的状态，但是各个子网的内部网络是正常的 （2） 为什么CAP只能三选二？如果发生网络分区故障，那么在操作的步骤(2)将发生错误：G1发送的消息不能传送到G2上。这样数据就处于不一致的状态，B读取到的就不是最新的数据，如图2-3所示。如果我们采用一些技术如阻塞、加锁、集中控制等来保证数据的一致，那么必然会影响到系统的可用性和分区容错性。 在C（一致性）和A（可用性）之间寻求平衡。 （3） Base理论：基本可用（Basically Available），软状态（soft state）, 最终一致性（Eventually consistent） 基本可用：指分布式系统在出现不可预知故障的时候，允许损失部分可用性响应时间上的损失；系统功能上的损失 软状态：允许系统在不同节点的数据副本之间进行数据同步的过程存在延迟 最终一致性：所有数据副本，在经过一段时间的同步之后，最终能达到一个一致的状态。 （https://blog.csdn.net/bntX2jSQfEHy7/article/details/79623628） 十三、 大数据处理https://www.cnblogs.com/yangjiannr/p/da-shu-ju-chu-libitmap.html 十四、 面经16. 1、2018.08.27 快手面经作者：H2PL链接：https://www.nowcoder.com/discuss/99283来源：牛客网一面：1 写一个选择排序或者插入排序2 写一个生产者消费者3 Java多线程了解么，什么时候一个int类型的操作是不安全的，自加呢，赋值呢。 如果使用volatile修饰的话有什么作用。4 MySQL和redis的区别是什么5 为什么MySQL和Redis都要使用独立进程来部署，开放端口来提供服务，为什么不写在内核中。6 有一个场景，多线程并发，为每个线程安排一个随机的睡眠时间，设想一种数据结构去唤醒睡眠时间结束的线程，应该用哪种结构，答应该用优先级队列，也就是小顶堆，顶部是剩余睡眠时间最短的那个线程。二面：1 项目2 多线程3 一道算法题，一个二维矩阵进行逆置操作，也就是行变列列变行。刚开始我理解错了，直接用一维数组转储再重新填入新数组。面试官说可以不用一维数组么然后解答的过程中才发现我理解错了。改了一会才搞定。4 扩展一下，二维数组存在500g的文件中，怎么做才能完成上面算法的操作，我就说先按行拆分，最后再拼接。5 扩展两下，一行数据就会超出内存，应该怎么做，那就按列拆分，最后合并。6 知道服务的横向扩展和纵向扩展么，刚开始理解错了，后来就说是提高单机性能，以及扩展成集群。7 cap介绍一下吧，为什么只能3选28 线程与进程9 tcp和udp的区别10 get和post的区别11 并发量大概多少，做过优化吗","categories":[],"tags":[]},{"title":"hexo","slug":"hexo","date":"2021-04-29T09:24:07.000Z","updated":"2021-04-29T09:24:07.319Z","comments":true,"path":"2021/04/29/hexo/","link":"","permalink":"http://example.com/2021/04/29/hexo/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"text1","slug":"text1","date":"2021-04-29T08:58:31.000Z","updated":"2021-04-29T09:02:25.727Z","comments":true,"path":"2021/04/29/text1/","link":"","permalink":"http://example.com/2021/04/29/text1/","excerpt":"","text":"本文由 简悦 SimpRead 转码， 原文地址 mp.weixin.qq.com Hexo 博客框架比较成熟，出了问题，网上可以搜索到很多的解决方式，无论是 Windows 还是 Linux，操作其实都是差不多的 一、环境准备提前装好 Git，这里不多讲解了，可以百度安装下。 安装 Nodejs下载 nodejs：https://nodejs.org/en/ 安装直接点击下一步、下一步就可以了。 安装完以后会有两个组件：1. 是 npm 包管理器；2. 是 Nodejs 本身。 如果是 mac，需打开终端切换到 root 用户: sudo su 输入密码，敲回车。 输入clear清一下。 查看 node 的版本：node -v 查看 npm 包管理器的版本：npm -v Windows 电脑我是直接以管理员身份打开 cmd，输入: 查看 node 的版本：node -v 查看 npm 包管理器的版本：npm -v 因为 Hexo 需要 Nodejs 支持的、生成的，所以这是前置步骤。 二、安装 Hexo 博客框架需借助 npm 包管理器来安装。因为国内安装镜像源很慢，所以利用 npm 安装 cnpm。 用淘宝链接进行安装：npm install -g cnpm --registry=https://registry.npm.taobao.org 敲cnpm就可以自动补全了，这个工具说明就有了。 看下 cnpm 的版本：cnpm -v 这个是 mac 的截图，Windows 一样操作 安装 Hexo 框架：cnpm install -g hexo-cli hexo -v来验证下。 可以看到 Hexo 的博客框架是基于 node 的。 三、使用 Hexo 搭建博客（本地启动）方式一：在开始之前，输入 pwd 看下所处路径。 新建一个 blog 文件夹：mkdir blog 方式二：我是直接在 E 盘自己手工创建了一个 blog 文件夹。 所有博客的东西全部都在 blog 里面生成。所以大家如果出了什么错，直接连 blog 文件夹整个删除就行了。注意：千万不能只删除 blog 文件夹里面的内容，却不删除 blog 文件夹，这样操作会出问题的。 进入 blog 的目录中，位于这个目录下，就可以使用 Hexo 生成我们的博客。 mac 下输入 sudo，表示用管理员的命令来执行，用 mac 电脑需要加上。 初始化一个博客：sudo hexo init 初始化一个博客：hexo init 您看，它会自己去克隆。还会默认克隆一个 Landscape 主题: 安装完成了！ 看该目录下的所有子目录和文件：ls 启动博客：hexo s 输入localhost:4000问下，看看博客是不是已经成功，已经有了，就像这样： 您看，还简介了 Hexo 怎么使用： hexo s就是hexo server ，写一篇博客，可以用hexo s这个命令启动预览下。 hexo n &quot;我的第一篇博客文章&quot; 切换到 source，输入命令：cd source/_posts/ 用 vim 编辑器： 可以进行编辑，也可以不编辑直接发布。 点击键盘的 i 进行编辑，shift 和 esc 同时按下 (这里我记得是这样用的，如果不行可以百度下），然后输入:wq保存退出。这个不太好用，编辑用 Visual Studio Code 这个工具即可。 这样博客文章就创建好了。 输入 pwd，看到在 source 目录下，需要退 2 层回去：cd ../.. 这样就到了 blog 目录。 接着输入以下命令：清理下：hexo clean 生成下：hexo g 启动下：hexo s 刷新下：http://localhost:4000 以上 Hexo 博客的搭建已经完成了。 四、部署到远端（Github）上公开使用 登录自己的 Github。 新建一个仓库： 注意：一定是你的昵称.github.io 现在是个空仓库，地址是这个，先放着。 继续在 blog 目录下，输入命令行操作：装 Git 部署的插件：cnpm install --save hexo-deployer-git 里面的红色警告可以忽略不管。 去 blog 文件下，直接看到一个_config.yml，修改_config.yml即可。注意：blog文件夹下的其它文件下也有_config.yml文件，别改错了文件。 文件的最底部修改成这样：deploy: type: git repository: https://github.com/qinghan586/qinghan586.github.io.git branch: master 注意：deploy: type: repository: branch: 后面都有一个英文的空格。 用 nopad++ 修改后一定要保存！ 部署到远端：hexo d 自动部署，需输入账号密码： 往远端推成功后，刷新 Github 仓库，发现多了很多东西，这些就是我的博客内容： 访问qinghan586.github.io就可以直接打开，并看到博客部署到 Github 上去了。 下载好看的主题：好看的 Hexo 主题地址：https://hexo.io/themes/ 自己来换个主题，克隆到 themes 主题下去： git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia git clone https://github.com/volantis-x/hexo-theme-volantis.git themes/volantis themes 文件夹下就出现你下载的主题了。 现在把主题配置到博客上去：修改_config.yml文件： theme: yilia theme: volantis 你用哪个主题就换哪个主题的名字，注意名称前面有个英文空格。 输入以下命令：hexo clean hexo g hexo s 启动本地服务：http://localhost:4000看看，主题已经换了。 推到远端（github）上去：hexo d 推送完成！ 访问qinghan586.github.io可看到主题成功换了！ 以上整个过程已经完成了。 后续学下 css，然后才会把自己的博客修改的很漂亮。先搭建起来，再考虑博客内容美观的问题。 五、注意修改_config.yml文件后，需要把主题配置到博客上去，输入 hexo clean hexo g hexo s 推到远端（github）上去：hexo d 都不行的情况下，可以换成这样的命令再次输入下：npm install hexo-deployer-git --save``hexo clean``hexo generate``hexo deploy 出现提示 nothing to commit, working tree clean我是这样提交文章成功的，依次输入： git add . git commit -m &quot;one&quot; hexo clean hexo generate hexo deploy hexo g hexo d hexo s hexo s后就出来了，域名本地都可以访问了。 如果 Hexo 部署提交不上，Github 仓库上文件未更新。删除 .deploy_git目录, 再执行hexo d -g就可以了。 Github 比较慢，刷新后需要耐心等待一下！ 推荐阅读 带你用 Python 实现自动化群控（入门篇） 这些自动化场景，批处理完全可以取代 Python 我用几行 Python 自动化脚本完美解决掉了小姐姐的微信焦虑感","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2021-04-29T08:15:22.977Z","updated":"2021-05-02T06:23:38.705Z","comments":true,"path":"2021/04/29/hello-world/","link":"","permalink":"http://example.com/2021/04/29/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. 吴朝鑫的奋斗史java路线,马士兵 Fuck算法–github 这个博客是怎么来的 这篇文章! 优秀的github对于新手而言，要从这浩瀚的代码库中找到适合自己小项目无异于大海捞针，如果有个类似于 hao123 那样的导航网站就好了！登登登，还真有，一个国人建立的开源项目：HelloGitHub，致力于分享 GitHub 上有趣，入门级的开源项目，对于编程新手而言十分友好。地址：https://github.com/521xueweihan/HelloGitHub对于编程新手而言，不管你是学 Java，还是学 Python，哪怕你是编程小白，不懂代码，也总能在里面找到适合你的项目。这个新手项目还不够？那在推荐一个类似但更有趣的开源项目：GitHubDaily。链接：https://github.com/GitHubDaily/GitHubDailyGitHubDaily 每日不定时推送一批 GitHub 上优秀的开源项目给开发者, 帮助开发者们发现当下最火的开源项目, 令开发者们得以掌控技术脉搏, 扩大自己的技术视野, 并从开源项目的学习中获得技术能力的提升。它分门别类的整理了好多有趣的项目，适合新手在零碎时间去阅读学习，了解 GitHub 的生态。 Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}